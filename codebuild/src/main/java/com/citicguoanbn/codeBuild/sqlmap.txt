<?xml version="1.0" encoding="UTF-8" ?>  
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
<mapper namespace="{PACKAGENAME}.mapper.{FUNNAME}.{CLASSNAME}DOMapper">

    <resultMap id="BaseResultMap" type="{PACKAGENAME}.po.{FUNNAME}.{CLASSNAME}DO">
      <id      column="id" javaType="java.lang.Long" jdbcType="BIGINT" property="id"/>
      <!--resultMap生成后删除一个result ID-->{fieldkeylist}
      <result  column="[field_name]" javaType="[field_Type]" jdbcType="[field_Jdbc_Type]" property="[fieldname]"/>{/fieldkeylist}
    </resultMap>

    <sql id="Base_Column_List">
       {fieldkeylist}[field_node],{/fieldkeylist}
    </sql>
	
    <sql id="_where">
        <where>
            1=1{wherelist}
            <if test="[fieldname] != null [varchar_notnull]">
                and [field_name] = #{[fieldname]}
            </if>{/wherelist}
        </where>
    </sql>

    <select id="getOne"  parameterType="java.util.Map" resultMap="BaseResultMap">
        select
            <include refid="Base_Column_List" />
        from
            {TABLENAME}
        <include refid="_where"/> LIMIT 1
    </select>

    <select id="getByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
            <include refid="Base_Column_List" />
        from
            {TABLENAME}
        where
            id = #{id,jdbcType=BIGINT}
    </select>

    <select id="listByParams"  parameterType="java.util.Map" resultMap="BaseResultMap">
        select
            <include refid="Base_Column_List" />
        from
            {TABLENAME}
        <include refid="_where"/>
      </select>

    <select id="listAll" resultMap="BaseResultMap">
        select
            <include refid="Base_Column_List" />
        from
            {TABLENAME}
    </select>

    <!--listPage 方法未找到-->

    <select id="count" resultType="java.lang.Integer">
        select count(id) from {TABLENAME} <include refid="_where"/>
    </select>

    <insert id="insert" parameterType="{PACKAGENAME}.po.{FUNNAME}.{CLASSNAME}DO">
        <selectKey resultType="java.lang.Long" order="AFTER" keyProperty="id">
          SELECT LAST_INSERT_ID()
        </selectKey>
        insert into
            {TABLENAME} ( <include refid="Base_Column_List" /> )
        values (
            {fieldkeylist}#{[fieldname],jdbcType=[field_Jdbc_Type]},{/fieldkeylist}
        )
    </insert>

    <insert id="insertSelective" parameterType="{PACKAGENAME}.po.{FUNNAME}.{CLASSNAME}DO">
        insert {TABLENAME}
        <trim prefix="(" suffix=")" suffixOverrides=",">
            {fieldkeylist}
                <if test="[fieldname] != null">[field_name],</if>
            {/fieldkeylist}
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            {fieldkeylist}
                <if test="[fieldname] != null">#{[fieldname],jdbcType=[field_Jdbc_Type]},</if>
            {/fieldkeylist}
        </trim>
      </insert>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete from {TABLENAME} where id = #{id,jdbcType=INTEGER}
    </delete>

    <update id="deleteByIdFalse" parameterType="java.lang.Long">
        update {TABLENAME} set status = 0 where id = #{id,jdbcType=BIGINT}
    </update>

    <update id="updateByPrimaryKey" parameterType="{PACKAGENAME}.po.{FUNNAME}.{CLASSNAME}DO">
        UPDATE {TABLENAME} SET {fieldlist}[field_node_u]=#{[fieldname]},{/fieldlist} WHERE {TABLEKEY}=#{{TABLEKEY}}
    </update>

    <update id="updateByPrimaryKeySelective" parameterType="{PACKAGENAME}.po.{FUNNAME}.{CLASSNAME}DO">
        update {TABLENAME}
        <set>
            {fieldkeylist}
                <if test="[fieldname] != null">
                    [field_name] = #{[fieldname],jdbcType=[field_Jdbc_Type]},
                </if>
            {/fieldkeylist}
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>

    <insert id="addInBatch" parameterType="java.util.List">
        insert into
            {TABLENAME} (<include refid="Base_Column_List" />)
        values
            <foreach collection="list" item="item" index="index" open=""  separator=","  close="">
                (
                  {fieldkeylist}
                      #{item.[fieldname],jdbcType=[field_Jdbc_Type]},
                  {/fieldkeylist}
                )
            </foreach>
    </insert>

    <update id="updateInBatch" parameterType="java.util.List">
        update {TABLENAME}
        <set>
            {fieldkeylist}
                [field_name] =
                <foreach collection="list" item="item" index="index"
                         separator=" " open="case ID" close="end,">
                  WHEN  #{item.id} THEN #{item.[fieldname],jdbcType=[field_Jdbc_Type]}
                </foreach>
            {/fieldkeylist}
        </set>
        where id in
        <foreach collection="list" index="index" item="item"  separator="," open="(" close=")">
          #{item.id,jdbcType=BIGINT}
        </foreach>
    </update>

    <update id="deleteByPrimaryKeyInBatch" parameterType="java.util.List">
        update {TABLENAME} set status = 0
        where id in
        <foreach collection="list" index="index" item="item"  separator="," open="(" close=")">
          #{item,jdbcType=BIGINT}
        </foreach>
    </update>

	<!-- 其他SQL写在此下方, 注意重新生成时会覆盖 -->
	
</mapper>
